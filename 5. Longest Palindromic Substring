Skip to content
Search or jump to…
Pull requests
Issues
Marketplace
Explore
 
@harsh474 
KnowledgeCenterYoutube
/
LeetCode
Public
Code
Issues
1
Pull requests
3
Actions
Projects
Security
Insights
LeetCode/5_longest_palindromic_substring
@KnowledgeCenterYoutube
KnowledgeCenterYoutube Leetcode_5 - Longest Palindromic substring
Latest commit bc242f5 on Jul 12, 2020
 History
 1 contributor
139 lines (122 sloc)  3.25 KB

Leetcode 5: Longest Palindromic Substring
Detailed video explanation: https://youtu.be/ZJUGtWObroc

C++:
-----
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.length() <= 1) return s;
        int max_len = 1;
        int n = s.length();
        int st = 0, end = 0;
        
        // Odd length
        for(int i = 0; i < n-1; ++i){
            int l = i, r = i;
            while(l >= 0 && r < n){
                if(s[l] == s[r]){
                    l--; r++;
                }else
                    break;
            }
            int len = r-l-1;
            if(len > max_len){
                max_len = len;
                st = l+1;
                end = r-1;
            }
        }
        
        // Even length
        for(int i = 0; i < n-1; ++i){
            int l = i, r = i+1;
            while(l >= 0 && r < n){
                if(s[l] == s[r]){
                    l--; r++;
                }else
                    break;
            }
            int len = r-l-1;
            if(len > max_len){
                max_len = len;
                st = l+1;
                end = r-1;
            }
        }
        
        return s.substr(st, max_len);
        
    }
};


Java:
-----
class Solution {
    public String longestPalindrome(String s) {
        if(s.length() <= 1) return s;
        int max_len = 1;
        int n = s.length();
        int st = 0, end = 0;
        
        // Odd length
        for(int i = 0; i < n-1; ++i){
            int l = i, r = i;
            while(l >= 0 && r < n){
                if(s.charAt(l) == s.charAt(r)){
                    l--; r++;
                }else
                    break;
            }
            int len = r-l-1;
            if(len > max_len){
                max_len = len;
                st = l+1;
                end = r-1;
            }
        }
        
        // Even length
        for(int i = 0; i < n-1; ++i){
            int l = i, r = i+1;
            while(l >= 0 && r < n){
                if(s.charAt(l) == s.charAt(r)){
                    l--; r++;
                }else
                    break;
            }
            int len = r-l-1;
            if(len > max_len){
                max_len = len;
                st = l+1;
                end = r-1;
            }
        }
        
        return s.substring(st, end + 1);
    }
}


Python3:
-------
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s) <= 1: return s
        max_len = 1
        n = len(s)
        st, end = 0, 0
        
        # Odd length
        for i in range(n-1):
            l, r = i, i
            while l >= 0 and r < n:
                if s[l] == s[r]:
                    l, r = l-1, r+1
                else:
                    break
            _len = r-l-1
            if _len > max_len:
                max_len = _len
                st, end = l+1, r-1
        
        # Even length
        for i in range(n-1):
            l, r = i, i+1
            while l >= 0 and r < n:
                if s[l] == s[r]:
                    l, r = l-1, r+1
                else:
                    break
            _len = r-l-1
            if _len > max_len:
                max_len = _len
                st, end = l+1, r-1
        
        return s[st:end+1]
        
        
Footer
© 2022 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
You have no unread notifications
