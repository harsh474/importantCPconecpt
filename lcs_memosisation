 // longest common subsequence using memositaion 
 https://practice.geeksforgeeks.org/problems/longest-common-subsequence-1587115620/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab
 class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
   // int t[1001][1001]; 
   int t[1001][1001] ;
int solve(string s1, string s2, int m, int n)
{
 if (n == 0 || m == 0)
  return 0;
 if (t[m][n] != -1)
  return t[m][n];
 if (s1[m - 1] == s2[n - 1])
  return t[m][n] = 1 + solve(s1, s2, m - 1, n - 1);
 else
 {
  return t[m][n] = max(solve(s1, s2, m - 1, n), solve(s1, s2, m, n - 1));
 }
}
    int lcs(int m, int n, string s1, string s2)
    {
        // your code here
         //  memset(t,-1,sizeof(int)) ;
       //  memset( t, sizeof( t), -1 );
       //  memset( t, 1001 * 1001 * sizeof( int ), -1 );
         // t(m + 1, n + 1,"-1"); 
        for(int i = 0;i<1001;i++)
        {  for(int j = 0;j<1001;j++)
            {  
                t[i][j] =-1 ;
            }
        }
            
          // cout<<t[0][3] ;
        return  solve(s1, s2, m, n);
    }
};
